#pragma once

#include <Windows.h>


#define WDLL 1
#define EXPORT __declspec(dllexport)

struct HierarchyInfo;
/****************************************************************************
*
*      Коды клавиш
*
****************************************************************************/
#define DIK_ESCAPE          0x01
#define DIK_1               0x02
#define DIK_2               0x03
#define DIK_3               0x04
#define DIK_4               0x05
#define DIK_5               0x06
#define DIK_6               0x07
#define DIK_7               0x08
#define DIK_8               0x09
#define DIK_9               0x0A
#define DIK_0               0x0B
#define DIK_MINUS           0x0C    /* - on main keyboard */
#define DIK_EQUALS          0x0D
#define DIK_BACK            0x0E    /* backspace */
#define DIK_TAB             0x0F
#define DIK_Q               0x10
#define DIK_W               0x11
#define DIK_E               0x12
#define DIK_R               0x13
#define DIK_T               0x14
#define DIK_Y               0x15
#define DIK_U               0x16
#define DIK_I               0x17
#define DIK_O               0x18
#define DIK_P               0x19
#define DIK_LBRACKET        0x1A
#define DIK_RBRACKET        0x1B
#define DIK_RETURN          0x1C    /* Enter на основной клавиатуре */
#define DIK_LCONTROL        0x1D
#define DIK_A               0x1E
#define DIK_S               0x1F
#define DIK_D               0x20
#define DIK_F               0x21
#define DIK_G               0x22
#define DIK_H               0x23
#define DIK_J               0x24
#define DIK_K               0x25
#define DIK_L               0x26
#define DIK_SEMICOLON       0x27
#define DIK_APOSTROPHE      0x28
#define DIK_GRAVE           0x29    /* accent grave */
#define DIK_LSHIFT          0x2A
#define DIK_BACKSLASH       0x2B
#define DIK_Z               0x2C
#define DIK_X               0x2D
#define DIK_C               0x2E
#define DIK_V               0x2F
#define DIK_B               0x30
#define DIK_N               0x31
#define DIK_M               0x32
#define DIK_COMMA           0x33
#define DIK_PERIOD          0x34    /* . на основной клавиатуре */
#define DIK_SLASH           0x35    /* /  на основной клавиатуре */
#define DIK_RSHIFT          0x36
#define DIK_MULTIPLY        0x37    /* * на цифровойклавиатуре */
#define DIK_LMENU           0x38    /* левый Alt */
#define DIK_SPACE           0x39
#define DIK_CAPITAL         0x3A
#define DIK_F1              0x3B
#define DIK_F2              0x3C
#define DIK_F3              0x3D
#define DIK_F4              0x3E
#define DIK_F5              0x3F
#define DIK_F6              0x40
#define DIK_F7              0x41
#define DIK_F8              0x42
#define DIK_F9              0x43
#define DIK_F10             0x44
#define DIK_NUMLOCK         0x45
#define DIK_SCROLL          0x46    /* Scroll Lock */
#define DIK_NUMPAD7         0x47
#define DIK_NUMPAD8         0x48
#define DIK_NUMPAD9         0x49
#define DIK_SUBTRACT        0x4A    /* -  на цифровой клавиатуре */
#define DIK_NUMPAD4         0x4B
#define DIK_NUMPAD5         0x4C
#define DIK_NUMPAD6         0x4D
#define DIK_ADD             0x4E    /* + на цифровой клавиатуре*/
#define DIK_NUMPAD1         0x4F
#define DIK_NUMPAD2         0x50
#define DIK_NUMPAD3         0x51
#define DIK_NUMPAD0         0x52
#define DIK_DECIMAL         0x53    /* .на цифровой клавиатуре */
#define DIK_OEM_102         0x56    /* <> or \| on RT 102-кнопочная клавиатура (Non-U.S.) */
#define DIK_F11             0x57
#define DIK_F12             0x58
#define DIK_F13             0x64    /*                     (NEC PC98) */
#define DIK_F14             0x65    /*                     (NEC PC98) */
#define DIK_F15             0x66    /*                     (NEC PC98) */
#define DIK_NUMPADEQUALS    0x8D    /* = на цифровой клавиатуре (NEC PC98) */
#define DIK_PREVTRACK       0x90    /* Previous Track (DIK_CIRCUMFLEX on Japanese keyboard) */
#define DIK_AT              0x91    /*                     (NEC PC98) */
#define DIK_COLON           0x92    /*                     (NEC PC98) */
#define DIK_UNDERLINE       0x93    /*                     (NEC PC98) */
#define DIK_STOP            0x95    /*                     (NEC PC98) */
#define DIK_UNLABELED       0x97    /*                        (J3100) */
#define DIK_NEXTTRACK       0x99    /* Next Track */
#define DIK_NUMPADENTER     0x9C    /* Enter on numeric keypad */
#define DIK_RCONTROL        0x9D
#define DIK_MUTE            0xA0    /* Mute */
#define DIK_CALCULATOR      0xA1    /* Calculator */
#define DIK_PLAYPAUSE       0xA2    /* Play / Pause */
#define DIK_MEDIASTOP       0xA4    /* Media Stop */
#define DIK_VOLUMEDOWN      0xAE    /* Volume - */
#define DIK_VOLUMEUP        0xB0    /* Volume + */
#define DIK_WEBHOME         0xB2    /* Web home */
#define DIK_NUMPADCOMMA     0xB3    /* , on numeric keypad (NEC PC98) */
#define DIK_DIVIDE          0xB5    /* / on numeric keypad */
#define DIK_SYSRQ           0xB7
#define DIK_RMENU           0xB8    /* right Alt */
#define DIK_PAUSE           0xC5    /* Pause */
#define DIK_HOME            0xC7    /* Home on arrow keypad */
#define DIK_UP              0xC8    /* UpArrow on arrow keypad */
#define DIK_PRIOR           0xC9    /* PgUp on arrow keypad */
#define DIK_LEFT            0xCB    /* LeftArrow on arrow keypad */
#define DIK_RIGHT           0xCD    /* RightArrow on arrow keypad */
#define DIK_END             0xCF    /* End on arrow keypad */
#define DIK_DOWN            0xD0    /* DownArrow on arrow keypad */
#define DIK_NEXT            0xD1    /* PgDn on arrow keypad */
#define DIK_INSERT          0xD2    /* Insert on arrow keypad */
#define DIK_DELETE          0xD3    /* Delete on arrow keypad */
#define DIK_LWIN            0xDB    /* Left Windows key */
#define DIK_RWIN            0xDC    /* Right Windows key */
#define DIK_APPS            0xDD    /* AppMenu key */
#define DIK_POWER           0xDE    /* System Power */
#define DIK_SLEEP           0xDF    /* System Sleep */
#define DIK_WAKE            0xE3    /* System Wake */
#define DIK_WEBSEARCH       0xE5    /* Web Search */
#define DIK_WEBFAVORITES    0xE6    /* Web Favorites */
#define DIK_WEBREFRESH      0xE7    /* Web Refresh */
#define DIK_WEBSTOP         0xE8    /* Web Stop */
#define DIK_WEBFORWARD      0xE9    /* Web Forward */
#define DIK_WEBBACK         0xEA    /* Web Back */
#define DIK_MYCOMPUTER      0xEB    /* My Computer */
#define DIK_MAIL            0xEC    /* Mail */
#define DIK_MEDIASELECT     0xED    /* Media Select */

/*
*  Alternate names for keys, to facilitate transition from DOS.
*/
#define DIK_BACKSPACE       DIK_BACK            /* backspace */
#define DIK_NUMPADSTAR      DIK_MULTIPLY        /* * on numeric keypad */
#define DIK_LALT            DIK_LMENU           /* left Alt */
#define DIK_CAPSLOCK        DIK_CAPITAL         /* CapsLock */
#define DIK_NUMPADMINUS     DIK_SUBTRACT        /* - on numeric keypad */
#define DIK_NUMPADPLUS      DIK_ADD             /* + on numeric keypad */
#define DIK_NUMPADPERIOD    DIK_DECIMAL         /* . on numeric keypad */
#define DIK_NUMPADSLASH     DIK_DIVIDE          /* / on numeric keypad */
#define DIK_RALT            DIK_RMENU           /* right Alt */
#define DIK_UPARROW         DIK_UP              /* UpArrow on arrow keypad */
#define DIK_PGUP            DIK_PRIOR           /* PgUp on arrow keypad */
#define DIK_LEFTARROW       DIK_LEFT            /* LeftArrow on arrow keypad */
#define DIK_RIGHTARROW      DIK_RIGHT           /* RightArrow on arrow keypad */
#define DIK_DOWNARROW       DIK_DOWN            /* DownArrow on arrow keypad */
#define DIK_PGDN            DIK_NEXT            /* PgDn on arrow keypad */

extern "C" 
{


EXPORT DWORD COLOR(int a,int r, int g, int b);

//////////////////////////////////////////////////////////////////////////
//
//	WindMill Framework
//
///////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация движка с параметрами по умолчанию
// Параметры:  	winName			- заголовок окна
//				width			- ширина окна в пикселях
//				height			- высота окна в пикселях
//				fullscreen		- полноэкранный режим
//				color			- цвет фона окна
//
// Возвращаемое значение:  нет
//----------------------------------------------------------------------------
EXPORT void IniEngine(wchar_t * winName, int width =800, int height =600, bool fullscreen  = false , DWORD color  = 0xff0000ff);

//-----------------------------------------------------------------------------
// Запуск движка
// Параметры:  	(*pFunc)(void)	- имя функции, которая является игровым циклом
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void RunEngine(void (*pFunc)(void)=0);

//////////////////////////////////////////////////////////////////////////
//
//	WinApp
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация окна приложения
// Параметры:  	winName			- заголовок окна
//				width			- ширина окна в пикселях
//				height			- высота окна в пикселях
//				resiz			- автоматическое изменение области рендеринга
//				fullscreen		- полноэкранный режим
//				icoID			- Идентификатор ресурса иконки приложения.
//				cursorName		- имя файла курсора (*.cur или *.ani)
//
// Возвращаемое значение:  нет
// Примечание: 	С версии 0.86 также происходит автоматическая инициализация графики и ввода.
//-----------------------------------------------------------------------------
EXPORT void WindowIni(wchar_t * winName, int width=800, int height=600, bool resiz=false, bool fullscreen= false, int icoID=0, wchar_t * cursorName=0);

//-----------------------------------------------------------------------------
// Изменение курсора мыши на указанный
// Параметры:  	cursorName	- имя файла курсора (*.cur или *.ani)
//
// Возвращаемое значение:  нет
//
//-----------------------------------------------------------------------------
EXPORT void SetMyCursor(wchar_t* cursorName);

//////////////////////////////////////////////////////////////////////////
//
//	ДиректХ
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация графики (DirextX)
// Параметры:  	hWnd		- идентификатор окна или элемента управления, в который будет осуществляться рендеринг
//				fullscreen		- полноэкранный режим
//				foncolor		- цвет фона окна
//
// Возвращаемое значение:  нет
//
//-----------------------------------------------------------------------------
EXPORT void GraphicsIni(HWND hWnd=0, bool fullscreen = false, DWORD fonColor = 0xff0000ff);

//-----------------------------------------------------------------------------
// Рендеринг графики а также управление звуком
// Параметры:  нет
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void Work();

//-----------------------------------------------------------------------------
// Изменение области рендеринга
// Параметры:	width	- ширина
//				height	- высота
//
// Возвращаемое значение: 	true 	- успешно
//							false	- не удалось
//-----------------------------------------------------------------------------
EXPORT bool Resizing(int width, int height);

//-----------------------------------------------------------------------------
// Получение WPF поверхности
// Параметры:	width	- ширина
//				height	- высота
//
// Возвращаемое значение: 	указатель на директх буфер
//-----------------------------------------------------------------------------
EXPORT LPVOID GetWPFImage(int width, int height);

//////////////////////////////////////////////////////////////////////////
//
//	Менеджер ресурсов
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
//  Инициализация менеджера ресурсов
// Параметры:  	
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void ResourceIni();	

//-----------------------------------------------------------------------------
//  Загрузка ресурса
// Параметры:  	resName		- имя файла, содержащего ресурс(графику или звук).
//				find		- автоматический поиск ресурса
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void LoadRes(wchar_t * resName, bool find = true);	//

//-----------------------------------------------------------------------------
//  Удаление ресурса
// Параметры:  	resName		- имя файла, содержащего ресурс(графику или звук).
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void DeleteRes(wchar_t * resName);	//


//////////////////////////////////////////////////////////////////////////
//
//	SceneManager
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация менеджера сцены
// Параметры:  	Layer		- количество задействованных слоев
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SceneManagerIni(int Layer=5);	// Инициализация менеджера сцены

//-----------------------------------------------------------------------------
// Установка позиции вида
// Параметры:  	x		- х координата
//				у		- у координата
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SetViewport(int x=0, int y=0);

//-----------------------------------------------------------------------------
// Рисование спрайта
// Параметры:  	fileName	- имя файла с изображением
//				x			- позиция по х
//				y			- позиция по у
//				layer		- используемый слой
//				rotate	 	- угол вращения
//				scale		- коеффициент изменения размера
//				Color		- цвет спрайта
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void DrawSprite(wchar_t * fileName,int x, int y, int layer=1, float rotate=0, float scale=1, DWORD Color  = 0xffffffff);

//-----------------------------------------------------------------------------
// Рисование фрагмента спрайта
// Параметры:  	fileName	- имя файла с изображением
//				x			- позиция по х
//				y			- позиция по у
//				left		- крайняя левая точка фрагмента
//				top		- верхняя точка фрагмента
//				right		- крайняя правая точка фрагмента
//				bottom		- нижняя точка фрагмента
//				layer		- используемый слой
//				rotate	 	- угол вращения
//				scale		- коеффициент изменения размера
//				Color		- цвет спрайта
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void DrawSpriteF(wchar_t * fileName,int x, int y, int left, int top, int right, int bottom, int layer=1, float r=0, float scale=1, DWORD color = 0xffffffff);


//-----------------------------------------------------------------------------
// Создание анимированного спрайта
// Параметры:  	fileName		- имя файла с изображением
//				totalFrame		- количество кадров содержащихся в файле
//				speed			- скорость анимации в кадрах за секунду
//				FrameWidth		- количество кадров в одном ряде
//				FrameWPSize	- ширина кадра в пикселях
//				FrameHPSize	- высота кадра в пикселях
//				layer			- используемый слой
//
// Возвращаемое значение:  идентификатор анимированного спрайта
//-----------------------------------------------------------------------------
EXPORT int CreateAnimation(wchar_t * fileName,int totalFrame, int speed, int FrameWidth, int FrameWPSize, int FrameHPSize=0, int layer=1);

//-----------------------------------------------------------------------------
/// Расширенная функция создания анимированного спрайта, содержащего несколько анимаций
// Параметры:  	fileName		- имя файла с изображением
//				AnimDesk		- указатель на массив с описание анимации
//				AnimNum			- количество анимаций
//				speed			- скорость анимации в кадрах за секунду
//				FrameWidth		- количество кадров в одном ряде
//				FrameWPSize		- ширина кадра в пикселях
//				FrameHPSize		- высота кадра в пикселях
//				layer			- используемый слой
//
// Возвращаемое значение:  идентификатор анимированного спрайта
//-----------------------------------------------------------------------------
EXPORT int CreateAnimationEx(wchar_t * fileName,int* AnimDesk, int AnimNum, int speed, int FrameWidth, int FrameWPSize, int FrameHPSize=0, int layer=1);

//-----------------------------------------------------------------------------
// Обновление анимированного спрайта
// Параметры:  	animID		- идентификатор созданного ранее анимированного спрайта
//				timeDelta	- время, прошедшее с последнего обновления
//				update		- включение/выключение автоматического обновления
//
// Возвращаемое значение: 	true 	- анимация воспроизводится
//							false	- анимация достигла последнего кадра и остановлена
//-----------------------------------------------------------------------------
EXPORT void UpdateAnimation(int animID, int timeDelta, bool update=true);


//-----------------------------------------------------------------------------
// Рисование анимированного спрайта
// Параметры:  	animID		- идентификатор созданного ранее анимированного спрайта
//				x			- позиция по х
//				y			- позиция по у
//				layer		- используемый слой
//				rotate	 	- угол вращения
//				scale		- коеффициент изменения размера
//				Color		- цвет спрайта
//
// Возвращаемое значение: 	true 	- анимация воспроизводится
//							false	- анимация достигла последнего кадра и остановлена
//-----------------------------------------------------------------------------
EXPORT bool DrawSpriteA(int animID,int x, int y, int layer=1, float r=0, float scale=1,DWORD Color = 0xffffffff);

//-----------------------------------------------------------------------------
// Установка текущей анимации
// Параметры:  	animID		- идентификатор созданного ранее анимированного спрайта
//				AnimNum	- порядковый номер анимации
//
// Возвращаемое значение:  нет
// Примечание: 	применяется только к анимации, созданной с помощью CreateAnimationEx
//-----------------------------------------------------------------------------
EXPORT void SetAnimation(int animID, int AnimNum);

//-----------------------------------------------------------------------------
// Сброс анимации. Установка позиции воспроизведения на первый кадр текущей анимации
// Параметры:  	animID		- идентификатор созданного ранее анимированного спрайта
//		
// Возвращаемое значение:  нет
// -----------------------------------------------------------------------------
EXPORT void ResetAnimation(int animID);

//-----------------------------------------------------------------------------
// Удаление анимации. Удаляется именно анимированный объект, а не изображение.
// Параметры:  	animID		- идентификатор созданного ранее анимированного спрайта
//		
// Возвращаемое значение:  нет
// -----------------------------------------------------------------------------
EXPORT void DeleteAnimation(int animID=-1);

//-----------------------------------------------------------------------------
// Задание скорости анимации
// Параметры:  	animID		- идентификатор созданного ранее анимированного спрайта
//				speed		- скорость анимации в кадрах за секунду
//		
// Возвращаемое значение:  нет
// -----------------------------------------------------------------------------
EXPORT void SetAnimationSpeed(int animID, int speed);

//-----------------------------------------------------------------------------
// Рисование линии
// Параметры:  	fileName	- имя файла с изображением
//				x1			- позиция начальной точки линии по х
//				y1			- позиция начальной точки линиипо у
//				x2			- позиция конечной точки линии по х
//				y2			- позиция конечной точки линии по у
//				width	 	- толщина линии
//				layer		- используемый слой
//				Color		- цвет спрайта
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void DrawLine(int x1,int y1, int x2, int y2,float width, int layer=1, DWORD color= 0xffffffff);

//////////////////////////////////////////////////////////////////////////
//
//	Text
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация системы вывода текста 
// Параметры:  	fontName		- имя файла с изображением в котором содержатся символы шрифта
//				fontDesc		- имя файла с информацией о шрифтах
//				fontSize		- ширина одного символа в пикселях
//
// Возвращаемое значение:  нет
// Примечание: 	Используйте изображение и описание шрифта, созданного программой FontBuilder
//-----------------------------------------------------------------------------
EXPORT void TextIni(wchar_t * fontName,wchar_t * fontDesc, int fontSize);

//////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
// Инициализация системы вывода текста в автоматической генерацией шрифтов
// Параметры:  	fontName		- системное имя шрифта
//				fontSize		- размер одного символа
//				bold			- жирный
//				italic			- курсив
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void TextGen(wchar_t * fontName, int fontSize, bool bold=false, bool italic=false);


//-----------------------------------------------------------------------------
// Отображение текста
// Параметры:  	text		- строка текста
//				x			- позиция по х
//				y			- позиция по у
//				size		- коеффициент изменения размера
//				layer		- используемый слой
//				Color		- цвет текста
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void Print(wchar_t * text,int x, int y, float size = 1.0f,int layer=0, DWORD Color = 0xffffffff);

//-----------------------------------------------------------------------------
// Отображение числа в виде текста
// Параметры:  	digit		- число
//				count		- колличество цифр после точки (обычно 0, максимум 6)
//				x			- позиция по х
//				y			- позиция по у
//				size		- коеффициент изменения размера
//				layer		- используемый слой
//				Color		- цвет текста
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void PrintDigit(double digit, int count, int x, int y, float size = 1.0f,int _layer=0, DWORD Color = 0xffffffff);

//////////////////////////////////////////////////////////////////////////
//
//	Input
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация системы ввода
// Параметры:  	hInstance		- идентификатор приложения
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void InputIni();

//-----------------------------------------------------------------------------
// Сканирование клавиатуры, поиск нажатых клавиш
// Параметры:  нет
//
// Возвращаемое значение:  код нажатой клавиши
// Примечание: 	если нажато несколько клавиш возврашает только найденную первой
//		функция очень медленная
//-----------------------------------------------------------------------------
EXPORT int KeysCheck();			

//-----------------------------------------------------------------------------
// Проверяет состояние конкретной клавиши
// Параметры:  	key		- код клавиши (определены #define в начале файла)
//
// Возвращаемое значение:	true	- клавиша нажата	
//							false	- клавиша не нажата
//-----------------------------------------------------------------------------
EXPORT bool KeyCheck(int key);

//-----------------------------------------------------------------------------
// Проверяет состояние левой кнопки мыши
// Параметры:  нет
//
// Возвращаемое значение:	true	- нажата	
//							false	- не нажата
//-----------------------------------------------------------------------------
EXPORT bool MouseLBPress();

//-----------------------------------------------------------------------------
// Проверяет состояние правой кнопки мыши
// Параметры:  нет
//
// Возвращаемое значение:	true	- нажата	
//							false	- не нажата
//-----------------------------------------------------------------------------
EXPORT bool MouseRBPress();

//-----------------------------------------------------------------------------
// Возвращает смещение курсора мыши относительно позиции предыдущей проверки по х координате
// Параметры:  нет
//
// Возвращаемое значение:	смещение курсора
//							0	- смещения не было
//-----------------------------------------------------------------------------
EXPORT int MouseMoveX();

//-----------------------------------------------------------------------------
// Возвращает смещение курсора мыши относительно позиции предыдущей проверки по у координате
// Параметры:  нет
//
// Возвращаемое значение:	смещение курсора
//							0	- смещения не было
//-----------------------------------------------------------------------------
EXPORT int MouseMoveY();

//-----------------------------------------------------------------------------
// Возвращает позицию курсора мыши по х координате
// Параметры:  нет
//
// Возвращаемое значение:  позиция курсора мыши по х координате
//-----------------------------------------------------------------------------
EXPORT int GetMouseX();

//-----------------------------------------------------------------------------
// Возвращает позицию курсора мыши по у координате
// Параметры:  нет
//
// Возвращаемое значение:  позиция курсора мыши по у координате
//-----------------------------------------------------------------------------
EXPORT int GetMouseY();

//-----------------------------------------------------------------------------
// Возвращает позицию курсора мыши в мире по х координате
// Параметры:  нет
//
// Возвращаемое значение:  позиция курсора мыши по х координате
//-----------------------------------------------------------------------------
EXPORT int GetWorldX();

//-----------------------------------------------------------------------------
// Возвращает позицию курсора мыши в мире по у координате
// Параметры:  нет
//
// Возвращаемое значение:  позиция курсора мыши по у координате
//-----------------------------------------------------------------------------
EXPORT int GetWorldY();

//-----------------------------------------------------------------------------
// Проверяет состояние колесика мыши
// Параметры:  нет
//
// Возвращаемое значение:	0	- вращения не было
//							<0	- вращение на себя
//							>0	- вращение от себя
//-----------------------------------------------------------------------------
EXPORT int RollingMouse();

//////////////////////////////////////////////////////////////////////////
//
//	Звуковой движек
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Инициализация звукового движка
// Параметры:  	Gvard		- максимальное количество одинаковых звуков на 1 секунду
//							для системы контроля звука (0 - отключено)
//				EAX		- состояние механизма интерактивного окружения (true - включено, false - выключено)
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundEngineIni(int Gvard = 10, bool EAX=false);

//-----------------------------------------------------------------------------
// Установка позиции слушателя звука
// Параметры:  	x		- позиция по х
//				y		- позиция по у
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SetSoundListener(int x,int y);

//-----------------------------------------------------------------------------
// Установка громкости всех звуков
// Параметры:  	volume 		- уровень громкости
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SetSoundsVolume(float volume);

//-----------------------------------------------------------------------------
// Установка громкости конкретного звука
// Параметры:  	ID			- идентификатор звука
//				volume 		- уровень громкости
//
// Возвращаемое значение:  *
//-----------------------------------------------------------------------------
EXPORT void SetSoundVolume(unsigned long ID, float volume);

//-----------------------------------------------------------------------------
// Произрывание звуков и музыки
// Параметры:  	fileName		- имя файла звука или музыки
//				volume			- уровень громкости
//				x				- х позиция источника звука в пространстве
//				y				- у позиция источника звука в пространстве
//				distMin		- дистанция, на которой громкость звука максимальная
//				distMax		- дистанция, за пределами которой звук не слышен
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundPlay(wchar_t * fileName, float volume=1, int x=0, int y=0, int distMin=0, int distMax=0);

//-----------------------------------------------------------------------------
// Расширенная функция проигрыванияе звуков и музыки. Создает звук, которым можно управлять
// Параметры:  	fileName		- имя файла звука или музыки
//				volume			- уровень громкости
//				x				- х позиция источника звука в пространстве
//				y				- у позиция источника звука в пространстве
//				distMin		- дистанция, на которой громкость звука максимальная
//				distMax		- дистанция, за пределами которой звук не слышен
//				loop			- повторное проигрывание звука
//				loopCount		- количество повторений
//				loopPeriod		- интервал повторения в секундах
//				random			- случайное воспроизведения звука
//				randPercent	- вероятность воспроизведения в прощентах
//
// Возвращаемое значение:  идентификатор звука
//-----------------------------------------------------------------------------
EXPORT unsigned long SoundPlayEx(wchar_t * fileName, float volume=1, int x=0, int y=0, int distMin=0, int distMax=0, bool loop=false, int loopCount=0, int loopPeriod=0, bool random=false, int randPercent=0);

//-----------------------------------------------------------------------------
// Остановка и удаление всех звуков
// Параметры:  нет
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundsStop();	// остановка и удаление звука

//-----------------------------------------------------------------------------
// Остановка и удаление звука
// Параметры:  ID		- идентификатор звука		
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundStop(unsigned long ID);

//-----------------------------------------------------------------------------
// Приостановка воспроизведения всех звуков
// Параметры:  нет
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundsPause();	// 

//-----------------------------------------------------------------------------
// Приостановка воспроизведения звука
// Параметры:   ID		- идентификатор звука
//
// Возвращаемое значение:  нет
//
//-----------------------------------------------------------------------------
EXPORT void SoundPause(unsigned long ID);

//-----------------------------------------------------------------------------
// Возобновление воспроизведения всех звуков
// Параметры:  нет
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundsRestore();	// возобновление

//-----------------------------------------------------------------------------
// Возобновление воспроизведения звука
// Параметры:  ID		- идентификатор звука		
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SoundRestore(unsigned long ID);

//-----------------------------------------------------------------------------
// Проверяет состояние созданного ранее звука
// Параметры:  ID		- идентификатор звука		
//
// Возвращаемое значение:  	true - звук существует и доступен
//							false - звука не существует
//-----------------------------------------------------------------------------
EXPORT bool GetSoundState(unsigned long ID);

//-----------------------------------------------------------------------------
// Устанавливает позицию звука
// Параметры:  ID		- идентификатор звука		
//				х		- х координата
//				у		- у координата
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void SetSoundPos(unsigned long ID,int x, int y);


//////////////////////////////////////////////////////////////////////////
//
//	DevHelp
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Функция отображения дополнительной (вспомогательной) информации 
// Параметры:	fps		- отображение фпс
//				resY	- отображает информацию об используемых ресурсах, также задает позицию начала отображения
//				logY	- отображает последнее сообщение помещенное в лог-файл, также задает позицию начала отображения
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void DevelopHelp(bool fps, int resY=0, int logY=0);

//////////////////////////////////////////////////////////////////////////
//
//	Log
//
//////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// Функция записывает строку текста в лог-файл. 
// Параметры:  text		- строка текста
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void wmLog(wchar_t * text);


//////////////////////////////////////////////////////////////////////////
//
//	Net
//
//////////////////////////////////////////////////////////////////////////
//----------------------------------------------------------------------------
// Функция инициализации сети 
// Параметры:	pFuncHandler	- указатель на функцию-обработчик, вызывается при получении даных
//				pFuncConnect	- указатель на функцию-обработчик, вызывается при подключении к серверу, или нового клиента
//				pFuncDisConnect	- указатель на функцию-обработчик, вызывается при отключении от сервера, или отключении клиента

// Возвращаемое значение:  true - успешно
//						   false - не удалось
//-----------------------------------------------------------------------------
EXPORT bool NetIni(void (*pFuncHandler)(int ID, char* buff, int len),
					void (*pFuncConnect)(int ID), void (*pFuncDisConnect)(int ID)); 

//-----------------------------------------------------------------------------
// Создание сервера 
// Параметры:	IPAdress	- IP адрес сервера
//				port		- используемый порт
//				
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void CreateServer(WCHAR* IPAdress,int port);

//-----------------------------------------------------------------------------
// Создание клиента и подключение к серверу 
// Параметры:	IPAdress	- IP адрес сервера
//				port		- порт на сервере
//				
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void CreateClient(WCHAR* IPAdress,int port);

//-----------------------------------------------------------------------------
// Отправка данных по сети 
// Параметры:	ID		- идентификатор клиента (0 - идентификатор сервера)
//				buff	- буфер данных
//				
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void NetSend(int ID, char* buff);

//-----------------------------------------------------------------------------
// Завершение существующего подключения (работает только на сервере)
// Параметры:	ID		- идентификатор клиента
//				
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void CloseConnect(int ID);

//////////////////////////////////////////////////////////////////////////
//
//	GUI
//
//////////////////////////////////////////////////////////////////////////

enum WidgetType{BUTTON=1, PANEL = 2, IMAGE, STATTEXT, EDIT, CONTAINER};
enum WidgetFild{POS_X=1,POS_Y=2, SIZE_X, SIZE_Y, VISIBLE, DRAGDROP,TCOLOR, FCOLOR,
NAME=10, FATHER = 11, TEXT, TEX1 = 15, TEX2 = 16, TEX3};
enum EVENT{CLICK=1,ACTIVATE=2, DEACTIVATE, DRAG, PAINT, KEYPRESS, DRAGEND};

//-----------------------------------------------------------------------------
// Инициализация Gui
// Параметры:  	fileName	- имя файла ГУИ
//			  	editMode	- включение режима редактирования
//
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT void GuiIni(wchar_t * fileName, WCHAR *keycode, bool editMode);

//-----------------------------------------------------------------------------
// Установка числового значения переменной виджета
// Параметры:  	WidgetName	- имя виджета
//			  	wf			- идентификатор переменной
//			  	value		- задаваемое значение

// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------

EXPORT bool gui_SetDigitVariable(wchar_t * WidgetName, WidgetFild wf, int value );

//-----------------------------------------------------------------------------
// Получение числового значения переменной виджета
// Параметры:  	WidgetName	- имя виджета
//			  	wf			- идентификатор переменной

// Возвращаемое значение:  значение переменной
//-----------------------------------------------------------------------------
EXPORT int gui_GetDigitVariable(wchar_t * WidgetName, WidgetFild wf);

//-----------------------------------------------------------------------------
// Установка значения текстовой переменной виджета
// Параметры:  	WidgetName	- имя виджета
//			  	wf			- идентификатор переменной
//			  	value		- задаваемое значение

// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT bool gui_SetCharVariable(wchar_t * WidgetName, WidgetFild wf, wchar_t* value );

//-----------------------------------------------------------------------------
// Получение значения строчной переменной виджета
// Параметры:  	WidgetName	- имя виджета
//			  	wf			- идентификатор переменной

// Возвращаемое значение:  значение переменной
//-----------------------------------------------------------------------------
EXPORT wchar_t* gui_GetCharVariable(wchar_t * WidgetName, WidgetFild wf);

//-----------------------------------------------------------------------------
// Регистрация обработчика событий 
// Параметры:	WidgetName		- имя виджета
//				ev				- идентификатор события
//				pEvent			- указатель на функцию-обработчик событий
// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------

EXPORT void gui_RegEvent(wchar_t * WidgetName, EVENT ev,void (*pEvent)(void));

//-----------------------------------------------------------------------------
// Создание виджета 
// Параметры:	type		- тип виджета
//				name	- имя виджета 
//				father	- имя родителя виджета 
//				posX	- позиция виджета по Х 
//				posY	- позиция виджета по У 
//				text	- строка текста, (для виджета, содержащего текст )
//				texture1	- базовая текстура 
//				texture2	- текстура активного виджета 
//				texture3	- текстура виждета с фокусом 

// Возвращаемое значение:  true - успешно
//						   false - не удалось
//-----------------------------------------------------------------------------
EXPORT bool gui_CreateWidget(int type, wchar_t *name, wchar_t *father, int posX, int posY,  wchar_t *text, wchar_t* texture1, wchar_t* texture2, wchar_t* texture3);

//-----------------------------------------------------------------------------
// Удаление виджета 
// Параметры:	name		- имя виджета
//				fullDel		- полное удаление (false - если у виджета есть родитель, виджет отсоединяется от родителя и аттачится к корню иерархии, если родителя нет удаляется полностью)

// Возвращаемое значение:  true - успешно
//						   false - не удалось
//-----------------------------------------------------------------------------
EXPORT bool gui_DeleteWidget(wchar_t *name, bool fullDel);

//-----------------------------------------------------------------------------
// Присоединение одного виджета к другому 
// Параметры:	destName		- виджет, к которому присоединяют
//				sourceName		- виджет, который присоединяют

// Возвращаемое значение:  нет
//-----------------------------------------------------------------------------
EXPORT bool gui_AttachWidget(wchar_t *destName, wchar_t *sourceName);


//////////////////////////////////////////////////////////////////////////
EXPORT void gui_Save(wchar_t * fileName, WCHAR *keycode);

EXPORT int gui_GetHierarchySize();

EXPORT void gui_GetHierarchyInfo(HierarchyInfo* wiArray);

EXPORT void gui_RunEvent(wchar_t * WidgetName, int ev);


}